"models":
- "classname": |-
    Client
  "code": |-
    class Client(Base):
        __tablename__ = 'client'
        id = Column(Integer, primary_key=True, autoincrement=True)
        name = Column(String)
        email = Column(String)
        phone = Column(String)
        total_hours = Column(Decimal(10, 2), default=0)
        total_amount = Column(Decimal(10, 2), default=0)
        budget_amount = Column(Decimal(10, 2), default=0)
        is_over_budget = Column(Boolean, default=False)
  "description": |-
    Client table holding client information and budget status.
  "name": |-
    Client
- "classname": |-
    Project
  "code": |-
    class Project(Base):
        __tablename__ = 'project'
        id = Column(Integer, primary_key=True, autoincrement=True)
        client_id = Column(Integer, ForeignKey('client.id'))
        name = Column(String)
        total_project_hours = Column(Decimal(10, 2), default=0)
        total_project_amount = Column(Decimal(10, 2), default=0)
        project_budget_amount = Column(Decimal(10, 2), default=0)
        is_over_budget = Column(Boolean, default=False)
  "description": |-
    Project table associated with clients, holds project specifics and budget status.
  "name": |-
    Project
- "classname": |-
    Invoice
  "code": |-
    class Invoice(Base):
        __tablename__ = 'invoice'
        id = Column(Integer, primary_key=True, autoincrement=True)
        invoice_date = Column(DateTime)
        project_id = Column(Integer, ForeignKey('project.id'))
        invoice_amount = Column(Decimal(10, 2), default=0)
        payment_total = Column(Decimal(10, 2), default=0)
        invoice_balance = Column(Decimal(10, 2), default=0)
        is_paid = Column(Boolean, default=False)
  "description": |-
    Invoice table details the amount due based on project tasking.
  "name": |-
    Invoice
- "classname": |-
    Task
  "code": |-
    class Task(Base):
        __tablename__ = 'task'
        id = Column(Integer, primary_key=True, autoincrement=True)
        project_id = Column(Integer, ForeignKey('project.id'))
        name = Column(String)
        description = Column(String)
        total_task_hours_worked = Column(Decimal(10, 2), default=0)
        total_task_amount_billed = Column(Decimal(10, 2), default=0)
        task_budget_hours = Column(Decimal(10, 2), default=0)
        is_over_budget = Column(Boolean, default=False)
        invoice_id = Column(Integer, ForeignKey('invoice.id'))
  "description": |-
    Task table defining task specifics, hours worked, amount billed, and budget status.
  "name": |-
    Task
- "classname": |-
    Person
  "code": |-
    class Person(Base):
        __tablename__ = 'person'
        id = Column(Integer, primary_key=True, autoincrement=True)
        client_id = Column(Integer, ForeignKey('client.id'))
        name = Column(String)
        email = Column(String)
        phone = Column(String)
        billing_rate = Column(Decimal(10, 2), default=0)
        total_hours_entered = Column(Decimal(10, 2), default=0)
        total_amount_billed = Column(Decimal(10, 2), default=0)
  "description": |-
    Person table records employee details along with hours and billing.
  "name": |-
    Person
- "classname": |-
    Timesheet
  "code": |-
    class Timesheet(Base):
        __tablename__ = 'timesheet'
        id = Column(Integer, primary_key=True, autoincrement=True)
        task_id = Column(Integer, ForeignKey('task.id'))
        person_id = Column(Integer, ForeignKey('person.id'))
        date_worked = Column(DateTime)
        hours_worked = Column(Decimal(10, 2), default=0)
        month = Column(Integer, default=0)
        year = Column(Integer, default=0)
        billing_rate = Column(Decimal(10, 2), default=0)
        total_amount_billed = Column(Decimal(10, 2), default=0)
  "description": |-
    Timesheet table that tracks employee hours worked on tasks.
  "name": |-
    Timesheet
- "classname": |-
    Payment
  "code": |-
    class Payment(Base):
        __tablename__ = 'payment'
        id = Column(Integer, primary_key=True, autoincrement=True)
        invoice_id = Column(Integer, ForeignKey('invoice.id'))
        payment_amount = Column(Decimal(10, 2), default=0)
        payment_date = Column(DateTime)
        notes = Column(String)
  "description": |-
    Payment records towards invoices of projects.
  "name": |-
    Payment
"name": |-
  TimeTrackingAndBillingSystem
"rules":
- "code": |-
    Rule.sum(derive=Person.total_hours_entered, as_sum_of=Timesheet.hours_worked)
  "description": |-
    Total Hours entered is sum of timesheet hours worked
  "entity": |-
    Person
  "name": |-
    Person Total Hours Calculation
  "use_case": |-
    Person
- "code": |-
    Rule.formula(derive=Person.total_amount_billed, as_expression=lambda row: row.total_hours_entered * row.billing_rate)
  "description": |-
    Total amount billed is total hours entered times billing rate
  "entity": |-
    Person
  "name": |-
    Person Total Amount Billed Formula
  "use_case": |-
    Person
- "code": |-
    Rule.constraint(validate=Person, as_condition=lambda row: 0 < row.billing_rate < 200, error_msg='Billing rate ({row.billing_rate}) out of range.')
  "description": |-
    Billing rate must be greater than 0 and less than 200
  "entity": |-
    Person
  "name": |-
    Person Billing Rate Constraint
  "use_case": |-
    Person
- "code": |-
    Rule.formula(derive=Timesheet.total_amount_billed, as_expression=lambda row: row.hours_worked * row.billing_rate)
  "description": |-
    The total amount billed is the Person billing rate times hours worked
  "entity": |-
    Timesheet
  "name": |-
    Timesheet Total Amount Billed
  "use_case": |-
    Timesheet
- "code": |-
    Rule.constraint(validate=Timesheet, as_condition=lambda row: 0 < row.hours_worked < 15, error_msg='Invalid hours worked: {row.hours_worked}.')
  "description": |-
    Hours worked must be greater than 0 and less than 15
  "entity": |-
    Timesheet
  "name": |-
    Timesheet Hours Worked Constraint
  "use_case": |-
    Timesheet
- "code": |-
    Rule.constraint(validate=Timesheet, as_condition=lambda row: row.date_worked > datetime(2025, 1, 1), error_msg='Invalid date worked: {row.date_worked}.')
  "description": |-
    Date worked must be after 2025-01-01
  "entity": |-
    Timesheet
  "name": |-
    Timesheet Date Worked Constraint
  "use_case": |-
    Timesheet
- "code": |-
    Rule.formula(derive=Timesheet.month, as_expression=lambda row: row.date_worked.month)
    Rule.formula(derive=Timesheet.year, as_expression=lambda row: row.date_worked.year)
  "description": |-
    Extract month and year from date worked
  "entity": |-
    Timesheet
  "name": |-
    Timesheet Extract Month and Year
  "use_case": |-
    Timesheet
- "code": |-
    Rule.copy(derive=Timesheet.billing_rate, from_parent=Person.billing_rate)
  "description": |-
    Copy billing rate from Person billing rate
  "entity": |-
    Timesheet
  "name": |-
    Timesheet Copy Billing Rate
  "use_case": |-
    Timesheet
- "code": |-
    Rule.sum(derive=Task.total_task_hours_worked, as_sum_of=Timesheet.hours_worked)
  "description": |-
    Total task hours worked is the sum of Timesheet hours worked
  "entity": |-
    Task
  "name": |-
    Task Total Hours Worked Calculation
  "use_case": |-
    Task
- "code": |-
    Rule.sum(derive=Task.total_task_amount_billed, as_sum_of=Timesheet.total_amount_billed)
  "description": |-
    Total task amount billed is the sum of Timesheet total amount billed
  "entity": |-
    Task
  "name": |-
    Task Total Amount Billed Calculation
  "use_case": |-
    Task
- "code": |-
    Rule.formula(derive=Task.is_over_budget, as_expression=lambda row: row.total_task_hours_worked > row.task_budget_hours)
  "description": |-
    Formula: is Over Budget when total task hours worked exceeds task budget hours
  "entity": |-
    Task
  "name": |-
    Task Over Budget Formula
  "use_case": |-
    Task
- "code": |-
    Rule.sum(derive=Project.total_project_hours, as_sum_of=Task.total_task_hours_worked)
  "description": |-
    Total project hours is the sum of Task total task hours worked
  "entity": |-
    Project
  "name": |-
    Project Total Hours Calculation
  "use_case": |-
    Project
- "code": |-
    Rule.sum(derive=Project.total_project_amount, as_sum_of=Task.total_task_amount_billed)
  "description": |-
    Total project amount is the sum of Task total amount billed
  "entity": |-
    Project
  "name": |-
    Project Total Amount Calculation
  "use_case": |-
    Project
- "code": |-
    Rule.formula(derive=Project.is_over_budget, as_expression=lambda row: row.total_project_amount > row.project_budget_amount)
  "description": |-
    Formula: set is Over Budget when total project amount exceeds project budget amount
  "entity": |-
    Project
  "name": |-
    Project Over Budget Formula
  "use_case": |-
    Project
- "code": |-
    Rule.sum(derive=Client.total_hours, as_sum_of=Project.total_project_hours)
  "description": |-
    Total hours is the sum of Project total project hours
  "entity": |-
    Client
  "name": |-
    Client Total Hours Calculation
  "use_case": |-
    Client
- "code": |-
    Rule.sum(derive=Client.total_amount, as_sum_of=Task.total_task_amount_billed)
  "description": |-
    Total amount is the sum of Task total amount billed
  "entity": |-
    Client
  "name": |-
    Client Total Amount Calculation
  "use_case": |-
    Client
- "code": |-
    Rule.formula(derive=Client.is_over_budget, as_expression=lambda row: row.total_amount > row.budget_amount)
  "description": |-
    Formula: is Over Budget is true when total amount exceeds budget amount.
  "entity": |-
    Client
  "name": |-
    Client Over Budget Formula
  "use_case": |-
    Client
- "code": |-
    Rule.sum(derive=Invoice.invoice_amount, as_sum_of=Task.total_task_amount_billed)
  "description": |-
    Invoice Amount is the sum of Task total amount billed.
  "entity": |-
    Invoice
  "name": |-
    Invoice Amount Calculation
  "use_case": |-
    Invoice
- "code": |-
    Rule.sum(derive=Invoice.payment_total, as_sum_of=Payment.payment_amount)
  "description": |-
    Payment total is the sum of Payment amount.
  "entity": |-
    Invoice
  "name": |-
    Invoice Payment Total Calculation
  "use_case": |-
    Invoice
- "code": |-
    Rule.formula(derive=Invoice.invoice_balance, as_expression=lambda row: row.invoice_amount - row.payment_total)
  "description": |-
    Invoice balance is invoice amount less payment total.
  "entity": |-
    Invoice
  "name": |-
    Invoice Balance Calculation
  "use_case": |-
    Invoice
- "code": |-
    Rule.formula(derive=Invoice.is_paid, as_expression=lambda row: row.invoice_balance == 0)
  "description": |-
    Formula: is_paid when invoice balance is zero.
  "entity": |-
    Invoice
  "name": |-
    Invoice Paid Status Formula
  "use_case": |-
    Invoice
"test_data": ""
"test_data_rows":
- "code": |-
    client_1 = Client(name="Acme Corp", email="contact@acme.com", phone="1234567890", total_hours=0, total_amount=0, budget_amount=5000, is_over_budget=False)
  "test_data_row_variable": |-
    client_1
- "code": |-
    client_2 = Client(name="Global Inc", email="info@global.com", phone="0987654321", total_hours=0, total_amount=0, budget_amount=10000, is_over_budget=False)
  "test_data_row_variable": |-
    client_2
- "code": |-
    client_3 = Client(name="Innovate LLC", email="hello@innovate.com", phone="1122334455", total_hours=0, total_amount=0, budget_amount=3000, is_over_budget=False)
  "test_data_row_variable": |-
    client_3
- "code": |-
    client_4 = Client(name="Techies", email="support@techies.com", phone="5566778899", total_hours=0, total_amount=0, budget_amount=7500, is_over_budget=False)
  "test_data_row_variable": |-
    client_4
- "code": |-
    project_1 = Project(client_id=1, name="Website Redesign", total_project_hours=0, total_project_amount=0, project_budget_amount=2000, is_over_budget=False)
  "test_data_row_variable": |-
    project_1
- "code": |-
    project_2 = Project(client_id=2, name="Mobile App Development", total_project_hours=0, total_project_amount=0, project_budget_amount=5000, is_over_budget=False)
  "test_data_row_variable": |-
    project_2
- "code": |-
    project_3 = Project(client_id=3, name="Cloud Migration", total_project_hours=0, total_project_amount=0, project_budget_amount=8000, is_over_budget=False)
  "test_data_row_variable": |-
    project_3
- "code": |-
    project_4 = Project(client_id=4, name="Security Audit", total_project_hours=0, total_project_amount=0, project_budget_amount=3000, is_over_budget=False)
  "test_data_row_variable": |-
    project_4
- "code": |-
    invoice_1 = Invoice(invoice_date=date(2025, 2, 1), project_id=1, invoice_amount=0, payment_total=0, invoice_balance=0, is_paid=False)
  "test_data_row_variable": |-
    invoice_1
- "code": |-
    invoice_2 = Invoice(invoice_date=date(2025, 3, 15), project_id=2, invoice_amount=0, payment_total=0, invoice_balance=0, is_paid=False)
  "test_data_row_variable": |-
    invoice_2
- "code": |-
    invoice_3 = Invoice(invoice_date=date(2025, 5, 10), project_id=3, invoice_amount=0, payment_total=0, invoice_balance=0, is_paid=False)
  "test_data_row_variable": |-
    invoice_3
- "code": |-
    invoice_4 = Invoice(invoice_date=date(2025, 6, 20), project_id=4, invoice_amount=0, payment_total=0, invoice_balance=0, is_paid=False)
  "test_data_row_variable": |-
    invoice_4
- "code": |-
    task_1 = Task(project_id=1, name="Design Phase", description="Create mockups and wireframes.", total_task_hours_worked=0, total_task_amount_billed=0, task_budget_hours=50.0, is_over_budget=False, invoice_id=1)
  "test_data_row_variable": |-
    task_1
- "code": |-
    task_2 = Task(project_id=2, name="Development Phase", description="Develop core features and functionalities.", total_task_hours_worked=0, total_task_amount_billed=0, task_budget_hours=150.0, is_over_budget=False, invoice_id=2)
  "test_data_row_variable": |-
    task_2
- "code": |-
    task_3 = Task(project_id=3, name="Testing Phase", description="Perform QA testing.", total_task_hours_worked=0, total_task_amount_billed=0, task_budget_hours=100.0, is_over_budget=False, invoice_id=3)
  "test_data_row_variable": |-
    task_3
- "code": |-
    task_4 = Task(project_id=4, name="Deployment Phase", description="Deploy application to production.", total_task_hours_worked=0, total_task_amount_billed=0, task_budget_hours=60.0, is_over_budget=False, invoice_id=4)
  "test_data_row_variable": |-
    task_4
- "code": |-
    person_1 = Person(client_id=1, name="Alice", email="alice@acme.com", phone="1231231234", billing_rate=50.0, total_hours_entered=0, total_amount_billed=0)
  "test_data_row_variable": |-
    person_1
- "code": |-
    person_2 = Person(client_id=2, name="Bob", email="bob@global.com", phone="2342342345", billing_rate=75.0, total_hours_entered=0, total_amount_billed=0)
  "test_data_row_variable": |-
    person_2
- "code": |-
    person_3 = Person(client_id=3, name="Charlie", email="charlie@innovate.com", phone="3453453456", billing_rate=100.0, total_hours_entered=0, total_amount_billed=0)
  "test_data_row_variable": |-
    person_3
- "code": |-
    person_4 = Person(client_id=4, name="Dana", email="dana@techies.com", phone="4564564567", billing_rate=120.0, total_hours_entered=0, total_amount_billed=0)
  "test_data_row_variable": |-
    person_4
- "code": |-
    timesheet_1 = Timesheet(task_id=1, person_id=1, date_worked=date(2025, 2, 10), hours_worked=8, month=2, year=2025, billing_rate=50.0, total_amount_billed=400.0)
  "test_data_row_variable": |-
    timesheet_1
- "code": |-
    timesheet_2 = Timesheet(task_id=2, person_id=2, date_worked=date(2025, 3, 12), hours_worked=6, month=3, year=2025, billing_rate=75.0, total_amount_billed=450.0)
  "test_data_row_variable": |-
    timesheet_2
- "code": |-
    timesheet_3 = Timesheet(task_id=3, person_id=3, date_worked=date(2025, 5, 8), hours_worked=10, month=5, year=2025, billing_rate=100.0, total_amount_billed=1000.0)
  "test_data_row_variable": |-
    timesheet_3
- "code": |-
    timesheet_4 = Timesheet(task_id=4, person_id=4, date_worked=date(2025, 6, 15), hours_worked=7.5, month=6, year=2025, billing_rate=120.0, total_amount_billed=900.0)
  "test_data_row_variable": |-
    timesheet_4
- "code": |-
    payment_1 = Payment(invoice_id=1, payment_amount=200.0, payment_date=date(2025, 2, 20), notes="Initial deposit")
  "test_data_row_variable": |-
    payment_1
- "code": |-
    payment_2 = Payment(invoice_id=2, payment_amount=300.0, payment_date=date(2025, 3, 18), notes="Partial payment")
  "test_data_row_variable": |-
    payment_2
- "code": |-
    payment_3 = Payment(invoice_id=3, payment_amount=400.0, payment_date=date(2025, 5, 15), notes="Quarterly payment")
  "test_data_row_variable": |-
    payment_3
- "code": |-
    payment_4 = Payment(invoice_id=4, payment_amount=500.0, payment_date=date(2025, 6, 25), notes="Final payment")
  "test_data_row_variable": |-
    payment_4
"test_data_sqlite": ""
