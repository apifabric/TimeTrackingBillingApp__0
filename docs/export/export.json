{
    "rules": [
        {
            "name": "Person_Totals",
            "description": "Total Hours entered is sum of timesheet hours worked. Total amount billed is total hours entered times billing rate. Billing rate must be greater than 0 and less than 200.",
            "use_case": "Person",
            "code": "Rule.sum(derive=Person.total_hours_entered, as_sum_of=Timesheet.hours_worked)\nRule.formula(derive=Person.total_amount_billed, as_expression=lambda row: row.total_hours_entered * row.billing_rate)\nRule.constraint(validate=Person, as_condition=lambda row: 0 < row.billing_rate < 200, error_msg='Billing rate must be between 0 and 200')",
            "error": null,
            "status": "active",
            "entity": null,
            "id": "01JJCFB5YB76XV1GS0Q5HQCS7V"
        },
        {
            "name": "Timesheet_Bill_Calc",
            "description": "The total amount billed is the Person billing rate times hours worked. Hours worked must be greater than 0 and less than 15. Date worked must be greater than 2025-01-01. Month is extracted using datetime from the date worked. Year is extracted using datetime from the date worked. Copy billing rate from Person billing rate.",
            "use_case": "Timesheet",
            "code": "Rule.formula(derive=Timesheet.total_amount_billed, as_expression=lambda row: row.billing_rate * row.hours_worked)\nRule.constraint(validate=Timesheet, as_condition=lambda row: 0 < row.hours_worked < 15, error_msg='Hours worked must be between 0 and 15')\nRule.constraint(validate=Timesheet, as_condition=lambda row: row.date_worked > date(2025, 1, 1), error_msg='Date worked must be after 2025-01-01')\nRule.formula(derive=Timesheet.month, as_expression=lambda row: row.date_worked.month)\nRule.formula(derive=Timesheet.year, as_expression=lambda row: row.date_worked.year)\nRule.copy(derive=Timesheet.billing_rate, from_parent=Person.billing_rate)",
            "error": null,
            "status": "active",
            "entity": null,
            "id": "01JJCFB5YXYHQ8FK4SK2JFY1PS"
        },
        {
            "name": "Task_Totals",
            "description": "Total task hours worked is the sum of Timesheet hours worked. Total task amount billed is the sum of Timesheet total amount billed. Formula: is Over Budget  when total task hours worked exceeds task budget hours.",
            "use_case": "Task",
            "code": "Rule.sum(derive=Task.total_task_hours_worked, as_sum_of=Timesheet.hours_worked)\nRule.sum(derive=Task.total_task_amount_billed, as_sum_of=Timesheet.total_amount_billed)\nRule.formula(derive=Task.is_over_budget, as_expression=lambda row: row.total_task_hours_worked > row.task_budget_hours)",
            "error": null,
            "status": "active",
            "entity": null,
            "id": "01JJCFB5Z8T27C219Q3VH3C0KE"
        },
        {
            "name": "Project_Totals",
            "description": "Total project hours is the sum of Task total task hours worked. Total project amount is the sum of Task total amount billed. Formula: set  is Over Budget when total project amount exceeds project budget amount.",
            "use_case": "Project",
            "code": "Rule.sum(derive=Project.total_project_hours, as_sum_of=Task.total_task_hours_worked)\nRule.sum(derive=Project.total_project_amount, as_sum_of=Task.total_task_amount_billed)\nRule.formula(derive=Project.is_over_budget, as_expression=lambda row: row.total_project_amount > row.project_budget_amount)",
            "error": null,
            "status": "active",
            "entity": null,
            "id": "01JJCFB5ZMQP9CVPH6H0TF1AGR"
        },
        {
            "name": "Client_Totals",
            "description": "Total hours is the sum of Project total task hours. Total amount is the sum of Task total amount. Formula: is Over Budget is true when total amount exceeds budget amount.",
            "use_case": "Client",
            "code": "Rule.sum(derive=Client.total_hours, as_sum_of=Project.total_task_hours_worked)\nRule.sum(derive=Client.total_amount, as_sum_of=Task.total_task_amount_billed)\nRule.formula(derive=Client.is_over_budget, as_expression=lambda row: row.total_amount > row.budget_amount)",
            "error": null,
            "status": "accepted",
            "entity": null,
            "id": "01JJCFB5ZZHS8TBR2KQE0CH4GA"
        },
        {
            "name": "Invoice_Totals",
            "description": "Invoice Amount is the sum of Task total amount billed. Payment total is the sum of Payment. Invoice balance is invoice amount less payment total. Formula: invoice_paid is true when invoice balance is zero.",
            "use_case": "Invoice",
            "code": "Rule.sum(derive=Invoice.invoice_amount, as_sum_of=Task.total_task_amount_billed)\nRule.sum(derive=Invoice.payment_total, as_sum_of=Payment.payment_amount)\nRule.formula(derive=Invoice.invoice_balance, as_expression=lambda row: row.invoice_amount - row.payment_total)\nRule.formula(derive=Invoice.is_paid, as_expression=lambda row: row.invoice_balance == 0)",
            "error": null,
            "status": "active",
            "entity": null,
            "id": "01JJCFB60DWS7VHA4BJ9J2NWN1"
        }
    ],
    "models": [
        {
            "classname": "Client",
            "code": "class Client(Base):  # type: ignore\n    \"\"\"\n    description: Client table holding client information and budget status.\n    \"\"\"\n    __tablename__ = 'client'\n    _s_collection_name = 'Client'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    email = Column(String)\n    phone = Column(String)\n    total_hours : DECIMAL = Column(DECIMAL(10, 2))\n    total_amount : DECIMAL = Column(DECIMAL(10, 2))\n    budget_amount : DECIMAL = Column(DECIMAL(10, 2))\n    is_over_budget = Column(Boolean)\n\n    # parent relationships (access parent)\n\n    # child relationships (access children)\n    PersonList : Mapped[List[\"Person\"]] = relationship(back_populates=\"client\")\n    ProjectList : Mapped[List[\"Project\"]] = relationship(back_populates=\"client\")"
        },
        {
            "classname": "Person",
            "code": "class Person(Base):  # type: ignore\n    \"\"\"\n    description: Person table records employee details along with hours and billing.\n    \"\"\"\n    __tablename__ = 'person'\n    _s_collection_name = 'Person'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    client_id = Column(ForeignKey('client.id'))\n    name = Column(String)\n    email = Column(String)\n    phone = Column(String)\n    billing_rate : DECIMAL = Column(DECIMAL(10, 2))\n    total_hours_entered : DECIMAL = Column(DECIMAL(10, 2))\n    total_amount_billed : DECIMAL = Column(DECIMAL(10, 2))\n\n    # parent relationships (access parent)\n    client : Mapped[\"Client\"] = relationship(back_populates=(\"PersonList\"))\n\n    # child relationships (access children)\n    TimesheetList : Mapped[List[\"Timesheet\"]] = relationship(back_populates=\"person\")"
        },
        {
            "classname": "Project",
            "code": "class Project(Base):  # type: ignore\n    \"\"\"\n    description: Project table associated with clients, holds project specifics and budget status.\n    \"\"\"\n    __tablename__ = 'project'\n    _s_collection_name = 'Project'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    client_id = Column(ForeignKey('client.id'))\n    name = Column(String)\n    total_project_hours : DECIMAL = Column(DECIMAL(10, 2))\n    total_project_amount : DECIMAL = Column(DECIMAL(10, 2))\n    project_budget_amount : DECIMAL = Column(DECIMAL(10, 2))\n    is_over_budget = Column(Boolean)\n\n    # parent relationships (access parent)\n    client : Mapped[\"Client\"] = relationship(back_populates=(\"ProjectList\"))\n\n    # child relationships (access children)\n    InvoiceList : Mapped[List[\"Invoice\"]] = relationship(back_populates=\"project\")\n    TaskList : Mapped[List[\"Task\"]] = relationship(back_populates=\"project\")"
        },
        {
            "classname": "Invoice",
            "code": "class Invoice(Base):  # type: ignore\n    \"\"\"\n    description: Invoice table details the amount due based on project tasking.\n    \"\"\"\n    __tablename__ = 'invoice'\n    _s_collection_name = 'Invoice'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    invoice_date = Column(DateTime)\n    project_id = Column(ForeignKey('project.id'))\n    invoice_amount : DECIMAL = Column(DECIMAL(10, 2))\n    payment_total : DECIMAL = Column(DECIMAL(10, 2))\n    invoice_balance : DECIMAL = Column(DECIMAL(10, 2))\n    is_paid = Column(Boolean)\n\n    # parent relationships (access parent)\n    project : Mapped[\"Project\"] = relationship(back_populates=(\"InvoiceList\"))\n\n    # child relationships (access children)\n    PaymentList : Mapped[List[\"Payment\"]] = relationship(back_populates=\"invoice\")\n    TaskList : Mapped[List[\"Task\"]] = relationship(back_populates=\"invoice\")"
        },
        {
            "classname": "Payment",
            "code": "class Payment(Base):  # type: ignore\n    \"\"\"\n    description: Payment records towards invoices of projects.\n    \"\"\"\n    __tablename__ = 'payment'\n    _s_collection_name = 'Payment'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    invoice_id = Column(ForeignKey('invoice.id'))\n    payment_amount : DECIMAL = Column(DECIMAL(10, 2))\n    payment_date = Column(DateTime)\n    notes = Column(String)\n\n    # parent relationships (access parent)\n    invoice : Mapped[\"Invoice\"] = relationship(back_populates=(\"PaymentList\"))"
        },
        {
            "classname": "Task",
            "code": "class Task(Base):  # type: ignore\n    \"\"\"\n    description: Task table defining task specifics, hours worked, amount billed, and budget status.\n    \"\"\"\n    __tablename__ = 'task'\n    _s_collection_name = 'Task'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    project_id = Column(ForeignKey('project.id'))\n    name = Column(String)\n    description = Column(String)\n    total_task_hours_worked : DECIMAL = Column(DECIMAL(10, 2))\n    total_task_amount_billed : DECIMAL = Column(DECIMAL(10, 2))\n    task_budget_hours : DECIMAL = Column(DECIMAL(10, 2))\n    is_over_budget = Column(Boolean)\n    invoice_id = Column(ForeignKey('invoice.id'))\n\n    # parent relationships (access parent)\n    invoice : Mapped[\"Invoice\"] = relationship(back_populates=(\"TaskList\"))\n    project : Mapped[\"Project\"] = relationship(back_populates=(\"TaskList\"))\n\n    # child relationships (access children)\n    TimesheetList : Mapped[List[\"Timesheet\"]] = relationship(back_populates=\"task\")"
        },
        {
            "classname": "Timesheet",
            "code": "class Timesheet(Base):  # type: ignore\n    \"\"\"\n    description: Timesheet table that tracks employee hours worked on tasks.\n    \"\"\"\n    __tablename__ = 'timesheet'\n    _s_collection_name = 'Timesheet'  # type: ignore\n\n    id = Column(Integer, primary_key=True)\n    task_id = Column(ForeignKey('task.id'))\n    person_id = Column(ForeignKey('person.id'))\n    date_worked = Column(DateTime)\n    hours_worked : DECIMAL = Column(DECIMAL(10, 2))\n    month = Column(Integer)\n    year = Column(Integer)\n    billing_rate : DECIMAL = Column(DECIMAL(10, 2))\n    total_amount_billed : DECIMAL = Column(DECIMAL(10, 2))\n\n    # parent relationships (access parent)\n    person : Mapped[\"Person\"] = relationship(back_populates=(\"TimesheetList\"))\n    task : Mapped[\"Task\"] = relationship(back_populates=(\"TimesheetList\"))"
        }
    ]
}