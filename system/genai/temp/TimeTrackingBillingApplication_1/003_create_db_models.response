{
    "models": [
        {
            "classname": "Client",
            "code": "class Client(Base):\n    __tablename__ = 'client'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String, nullable=True)\n    email = Column(String, nullable=True)\n    phone = Column(String, nullable=True)\n    total_hours = Column(DECIMAL(10, 2), default=0)\n    total_amount = Column(DECIMAL(10, 2), default=0)\n    budget_amount = Column(DECIMAL(10, 2), default=0)\n    is_over_budget = Column(Boolean, default=False)",
            "description": "Represents client details including financial information.",
            "name": "Client"
        },
        {
            "classname": "Project",
            "code": "class Project(Base):\n    __tablename__ = 'project'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    client_id = Column(Integer, ForeignKey('client.id'))\n    name = Column(String, nullable=True)\n    total_project_hours = Column(DECIMAL(10, 2), default=0)\n    total_project_amount = Column(DECIMAL(10, 2), default=0)\n    project_budget_amount = Column(DECIMAL(10, 2), default=0)\n    is_over_budget = Column(Boolean, default=False)",
            "description": "Tracks project-specific information and financial metrics.",
            "name": "Project"
        },
        {
            "classname": "Invoice",
            "code": "class Invoice(Base):\n    __tablename__ = 'invoice'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    invoice_date = Column(Date, nullable=True)\n    project_id = Column(Integer, ForeignKey('project.id'))\n    invoice_amount = Column(DECIMAL(10, 2), default=0)\n    payment_total = Column(DECIMAL(10, 2), default=0)\n    invoice_balance = Column(DECIMAL(10, 2), default=0)\n    is_paid = Column(Boolean, default=False)",
            "description": "Captured invoice details and financial status.",
            "name": "Invoice"
        },
        {
            "classname": "Task",
            "code": "class Task(Base):\n    __tablename__ = 'task'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    project_id = Column(Integer, ForeignKey('project.id'))\n    name = Column(String, nullable=True)\n    description = Column(String, nullable=True)\n    total_task_hours_worked = Column(DECIMAL(10, 2), default=0)\n    total_task_amount_billed = Column(DECIMAL(10, 2), default=0)\n    task_budget_hours = Column(DECIMAL(10, 2), default=0)\n    is_over_budget = Column(Boolean, default=False)\n    invoice_id = Column(Integer, ForeignKey('invoice.id'))",
            "description": "Represents individual tasks within a project.",
            "name": "Task"
        },
        {
            "classname": "Person",
            "code": "class Person(Base):\n    __tablename__ = 'person'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    client_id = Column(Integer, ForeignKey('client.id'))\n    name = Column(String, nullable=True)\n    email = Column(String, nullable=True)\n    phone = Column(String, nullable=True)\n    billing_rate = Column(DECIMAL(10, 2), default=0)\n    total_hours_entered = Column(DECIMAL(10, 2), default=0)\n    total_amount_billed = Column(DECIMAL(10, 2), default=0)",
            "description": "Contains personal details and billing information for individuals.",
            "name": "Person"
        },
        {
            "classname": "Timesheet",
            "code": "class Timesheet(Base):\n    __tablename__ = 'timesheet'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    task_id = Column(Integer, ForeignKey('task.id'))\n    person_id = Column(Integer, ForeignKey('person.id'))\n    date_worked = Column(Date, nullable=True)\n    hours_worked = Column(DECIMAL(10, 2), default=0)\n    month = Column(Integer, nullable=True)\n    year = Column(Integer, nullable=True)\n    billing_rate = Column(DECIMAL(10, 2), default=0)\n    total_amount_billed = Column(DECIMAL(10, 2), default=0)",
            "description": "Records time entries and calculates billing based on individual time worked.",
            "name": "Timesheet"
        },
        {
            "classname": "Payment",
            "code": "class Payment(Base):\n    __tablename__ = 'payment'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    invoice_id = Column(Integer, ForeignKey('invoice.id'))\n    payment_amount = Column(DECIMAL(10, 2), default=0)\n    payment_date = Column(Date, nullable=True)\n    notes = Column(String, nullable=True)",
            "description": "Manages payment records against invoices.",
            "name": "Payment"
        }
    ],
    "rules": [
        {
            "name": "Person - Total Hours",
            "description": "Total Hours entered is sum of timesheet hours worked",
            "use_case": "Person",
            "entity": "Person",
            "code": "Rule.sum(derive=Person.total_hours_entered, as_sum_of=Timesheet.hours_worked)"
        },
        {
            "name": "Person - Total Amount Billed",
            "description": "Total amount billed is total hours entered times billing rate",
            "use_case": "Person",
            "entity": "Person",
            "code": "Rule.formula(derive=Person.total_amount_billed, as_expression=lambda row: row.total_hours_entered * row.billing_rate)"
        },
        {
            "name": "Person - Billing Rate Constraint",
            "description": "Billing rate must be greater than 0 and less than 200",
            "use_case": "Person",
            "entity": "Person",
            "code": "Rule.constraint(validate=Person, as_condition=lambda row: 0 < row.billing_rate < 200, error_msg=\"Billing rate ({row.billing_rate}) must be between 0 and 200\")"
        },
        {
            "name": "Timesheet - Billed Amount",
            "description": "The total amount billed is the Person billing rate times hours worked",
            "use_case": "Timesheet",
            "entity": "Timesheet",
            "code": "Rule.formula(derive=Timesheet.total_amount_billed, as_expression=lambda row: row.billing_rate * row.hours_worked)"
        },
        {
            "name": "Timesheet - Hours Worked Constraint",
            "description": "Hours worked must be greater than 0 and less than 15",
            "use_case": "Timesheet",
            "entity": "Timesheet",
            "code": "Rule.constraint(validate=Timesheet, as_condition=lambda row: 0 < row.hours_worked < 15, error_msg=\"Hours worked ({row.hours_worked}) must be between 0 and 15\")"
        },
        {
            "name": "Timesheet - Date Worked Constraint",
            "description": "Date worked must be greater than 2025-01-01",
            "use_case": "Timesheet",
            "entity": "Timesheet",
            "code": "Rule.constraint(validate=Timesheet, as_condition=lambda row: row.date_worked > date(2025, 1, 1), error_msg=\"Date worked ({row.date_worked}) must be greater than January 1, 2025\")"
        },
        {
            "name": "Timesheet - Extract Month",
            "description": "Month is extracted from the date worked",
            "use_case": "Timesheet",
            "entity": "Timesheet",
            "code": "Rule.formula(derive=Timesheet.month, as_expression=lambda row: row.date_worked.month)"
        },
        {
            "name": "Timesheet - Extract Year",
            "description": "Year is extracted from the date worked",
            "use_case": "Timesheet",
            "entity": "Timesheet",
            "code": "Rule.formula(derive=Timesheet.year, as_expression=lambda row: row.date_worked.year)"
        },
        {
            "name": "Timesheet - Billing Rate Copy",
            "description": "Copy billing rate from Person billing rate",
            "use_case": "Timesheet",
            "entity": "Timesheet",
            "code": "Rule.copy(derive=Timesheet.billing_rate, from_parent=Person.billing_rate)"
        },
        {
            "name": "Task - Total Hours Worked",
            "description": "Total task hours worked is the sum of the Timesheet hours worked",
            "use_case": "Task",
            "entity": "Task",
            "code": "Rule.sum(derive=Task.total_task_hours_worked, as_sum_of=Timesheet.hours_worked)"
        },
        {
            "name": "Task - Total Amount Billed",
            "description": "Total task amount billed is the sum of the Timesheet total amount billed",
            "use_case": "Task",
            "entity": "Task",
            "code": "Rule.sum(derive=Task.total_task_amount_billed, as_sum_of=Timesheet.total_amount_billed)"
        },
        {
            "name": "Task - Is Over Budget",
            "description": "Formula: is Over Budget when total task hours worked exceeds task budget hours",
            "use_case": "Task",
            "entity": "Task",
            "code": "Rule.formula(derive=Task.is_over_budget, as_expression=lambda row: row.total_task_hours_worked > row.task_budget_hours)"
        },
        {
            "name": "Project - Total Project Hours",
            "description": "Total project hours is the sum of Task total task hours worked",
            "use_case": "Project",
            "entity": "Project",
            "code": "Rule.sum(derive=Project.total_project_hours, as_sum_of=Task.total_task_hours_worked)"
        },
        {
            "name": "Project - Total Project Amount",
            "description": "Total project amount is the sum of Task total amount billed",
            "use_case": "Project",
            "entity": "Project",
            "code": "Rule.sum(derive=Project.total_project_amount, as_sum_of=Task.total_task_amount_billed)"
        },
        {
            "name": "Project - Is Over Budget",
            "description": "Formula: set is Over Budget when total project amount exceeds project budget amount",
            "use_case": "Project",
            "entity": "Project",
            "code": "Rule.formula(derive=Project.is_over_budget, as_expression=lambda row: row.total_project_amount > row.project_budget_amount)"
        },
        {
            "name": "Client - Total Hours",
            "description": "Total hours is the sum of Project total task hours",
            "use_case": "Client",
            "entity": "Client",
            "code": "Rule.sum(derive=Client.total_hours, as_sum_of=Project.total_project_hours)"
        },
        {
            "name": "Client - Total Amount",
            "description": "Total amount is the sum of Project total amount",
            "use_case": "Client",
            "entity": "Client",
            "code": "Rule.sum(derive=Client.total_amount, as_sum_of=Project.total_project_amount)"
        },
        {
            "name": "Client - Is Over Budget",
            "description": "Formula: is Over Budget is true when total amount exceeds budget amount",
            "use_case": "Client",
            "entity": "Client",
            "code": "Rule.formula(derive=Client.is_over_budget, as_expression=lambda row: row.total_amount > row.budget_amount)"
        },
        {
            "name": "Invoice - Invoice Amount",
            "description": "Invoice Amount is the sum of Task total amount billed",
            "use_case": "Invoice",
            "entity": "Invoice",
            "code": "Rule.sum(derive=Invoice.invoice_amount, as_sum_of=Task.total_task_amount_billed)"
        },
        {
            "name": "Invoice - Payment Total",
            "description": "Payment total is the sum of Payment",
            "use_case": "Invoice",
            "entity": "Invoice",
            "code": "Rule.sum(derive=Invoice.payment_total, as_sum_of=Payment.payment_amount)"
        },
        {
            "name": "Invoice - Invoice Balance",
            "description": "Invoice balance is invoice amount less payment total",
            "use_case": "Invoice",
            "entity": "Invoice",
            "code": "Rule.formula(derive=Invoice.invoice_balance, as_expression=lambda row: row.invoice_amount - row.payment_total)"
        },
        {
            "name": "Invoice - Is Paid",
            "description": "Formula: is_paid when invoice balance is zero",
            "use_case": "Invoice",
            "entity": "Invoice",
            "code": "Rule.formula(derive=Invoice.is_paid, as_expression=lambda row: row.invoice_balance == 0)"
        }
    ],
    "test_data": "# Creating test data for Client\nclient_1 = Client(name=\"Client A\", email=\"clienta@example.com\", phone=\"123-456-7890\", total_hours=100, total_amount=10000, budget_amount=15000, is_over_budget=False)\nclient_2 = Client(name=\"Client B\", email=\"clientb@example.com\", phone=\"234-567-8901\", total_hours=200, total_amount=21000, budget_amount=25000, is_over_budget=False)\nclient_3 = Client(name=\"Client C\", email=\"clientc@example.com\", phone=\"345-678-9012\", total_hours=120, total_amount=11000, budget_amount=12000, is_over_budget=False)\nclient_4 = Client(name=\"Client D\", email=\"clientd@example.com\", phone=\"456-789-0123\", total_hours=80, total_amount=9000, budget_amount=8000, is_over_budget=True)\n\n# Creating test data for Project\nproject_1 = Project(client_id=1, name=\"Project Alpha\", total_project_hours=50, total_project_amount=5000, project_budget_amount=7000, is_over_budget=False)\nproject_2 = Project(client_id=2, name=\"Project Beta\", total_project_hours=75, total_project_amount=7600, project_budget_amount=8000, is_over_budget=False)\nproject_3 = Project(client_id=3, name=\"Project Gamma\", total_project_hours=90, total_project_amount=9200, project_budget_amount=9200, is_over_budget=False)\nproject_4 = Project(client_id=4, name=\"Project Delta\", total_project_hours=60, total_project_amount=6200, project_budget_amount=6000, is_over_budget=True)\n\n# Creating test data for Invoice\ninvoice_1 = Invoice(invoice_date=date(2026, 5, 20), project_id=1, invoice_amount=5000, payment_total=4000, invoice_balance=1000, is_paid=False)\ninvoice_2 = Invoice(invoice_date=date(2026, 6, 15), project_id=2, invoice_amount=7600, payment_total=7600, invoice_balance=0, is_paid=True)\ninvoice_3 = Invoice(invoice_date=date(2026, 7, 10), project_id=3, invoice_amount=9200, payment_total=9200, invoice_balance=0, is_paid=True)\ninvoice_4 = Invoice(invoice_date=date(2026, 8, 5), project_id=4, invoice_amount=6200, payment_total=6200, invoice_balance=0, is_paid=True)\n\n# Creating test data for Task\ntask_1 = Task(project_id=1, name=\"Task 1\", description=\"Task Description 1\", total_task_hours_worked=20, total_task_amount_billed=2000, task_budget_hours=25, is_over_budget=False, invoice_id=1)\ntask_2 = Task(project_id=2, name=\"Task 2\", description=\"Task Description 2\", total_task_hours_worked=15, total_task_amount_billed=1500, task_budget_hours=20, is_over_budget=False, invoice_id=2)\ntask_3 = Task(project_id=3, name=\"Task 3\", description=\"Task Description 3\", total_task_hours_worked=30, total_task_amount_billed=3000, task_budget_hours=30, is_over_budget=False, invoice_id=3)\ntask_4 = Task(project_id=4, name=\"Task 4\", description=\"Task Description 4\", total_task_hours_worked=10, total_task_amount_billed=1000, task_budget_hours=8, is_over_budget=True, invoice_id=4)\n\n# Creating test data for Person\nperson_1 = Person(client_id=1, name=\"Employee A\", email=\"empA@example.com\", phone=\"999-999-0001\", billing_rate=100, total_hours_entered=20, total_amount_billed=2000)\nperson_2 = Person(client_id=2, name=\"Employee B\", email=\"empB@example.com\", phone=\"999-999-0002\", billing_rate=120, total_hours_entered=15, total_amount_billed=1800)\nperson_3 = Person(client_id=3, name=\"Employee C\", email=\"empC@example.com\", phone=\"999-999-0003\", billing_rate=110, total_hours_entered=30, total_amount_billed=3300)\nperson_4 = Person(client_id=4, name=\"Employee D\", email=\"empD@example.com\", phone=\"999-999-0004\", billing_rate=90, total_hours_entered=10, total_amount_billed=900)\n\n# Creating test data for Timesheet\ntimesheet_1 = Timesheet(task_id=1, person_id=1, date_worked=date(2026, 3, 5), hours_worked=10, month=3, year=2026, billing_rate=100, total_amount_billed=1000)\ntimesheet_2 = Timesheet(task_id=2, person_id=2, date_worked=date(2026, 4, 10), hours_worked=8, month=4, year=2026, billing_rate=120, total_amount_billed=960)\ntimesheet_3 = Timesheet(task_id=3, person_id=3, date_worked=date(2026, 5, 22), hours_worked=10, month=5, year=2026, billing_rate=110, total_amount_billed=1100)\ntimesheet_4 = Timesheet(task_id=4, person_id=4, date_worked=date(2026, 6, 17), hours_worked=7, month=6, year=2026, billing_rate=90, total_amount_billed=630)\n\n# Creating test data for Payment\npayment_1 = Payment(invoice_id=1, payment_amount=3000, payment_date=date(2026, 5, 25), notes=\"Initial payment\")\npayment_2 = Payment(invoice_id=2, payment_amount=7600, payment_date=date(2026, 6, 20), notes=\"Full payment\")\npayment_3 = Payment(invoice_id=3, payment_amount=9200, payment_date=date(2026, 7, 15), notes=\"Complete payment\")\npayment_4 = Payment(invoice_id=4, payment_amount=6200, payment_date=date(2026, 8, 10), notes=\"Paid in full\")",
    "test_data_rows": [
        {
            "test_data_row_variable": "client_1",
            "code": "client_1 = Client(name=\"Client A\", email=\"clienta@example.com\", phone=\"123-456-7890\", total_hours=100, total_amount=10000, budget_amount=15000, is_over_budget=False)"
        },
        {
            "test_data_row_variable": "client_2",
            "code": "client_2 = Client(name=\"Client B\", email=\"clientb@example.com\", phone=\"234-567-8901\", total_hours=200, total_amount=21000, budget_amount=25000, is_over_budget=False)"
        },
        {
            "test_data_row_variable": "client_3",
            "code": "client_3 = Client(name=\"Client C\", email=\"clientc@example.com\", phone=\"345-678-9012\", total_hours=120, total_amount=11000, budget_amount=12000, is_over_budget=False)"
        },
        {
            "test_data_row_variable": "client_4",
            "code": "client_4 = Client(name=\"Client D\", email=\"clientd@example.com\", phone=\"456-789-0123\", total_hours=80, total_amount=9000, budget_amount=8000, is_over_budget=True)"
        },
        {
            "test_data_row_variable": "project_1",
            "code": "project_1 = Project(client_id=1, name=\"Project Alpha\", total_project_hours=50, total_project_amount=5000, project_budget_amount=7000, is_over_budget=False)"
        },
        {
            "test_data_row_variable": "project_2",
            "code": "project_2 = Project(client_id=2, name=\"Project Beta\", total_project_hours=75, total_project_amount=7600, project_budget_amount=8000, is_over_budget=False)"
        },
        {
            "test_data_row_variable": "project_3",
            "code": "project_3 = Project(client_id=3, name=\"Project Gamma\", total_project_hours=90, total_project_amount=9200, project_budget_amount=9200, is_over_budget=False)"
        },
        {
            "test_data_row_variable": "project_4",
            "code": "project_4 = Project(client_id=4, name=\"Project Delta\", total_project_hours=60, total_project_amount=6200, project_budget_amount=6000, is_over_budget=True)"
        },
        {
            "test_data_row_variable": "invoice_1",
            "code": "invoice_1 = Invoice(invoice_date=date(2026, 5, 20), project_id=1, invoice_amount=5000, payment_total=4000, invoice_balance=1000, is_paid=False)"
        },
        {
            "test_data_row_variable": "invoice_2",
            "code": "invoice_2 = Invoice(invoice_date=date(2026, 6, 15), project_id=2, invoice_amount=7600, payment_total=7600, invoice_balance=0, is_paid=True)"
        },
        {
            "test_data_row_variable": "invoice_3",
            "code": "invoice_3 = Invoice(invoice_date=date(2026, 7, 10), project_id=3, invoice_amount=9200, payment_total=9200, invoice_balance=0, is_paid=True)"
        },
        {
            "test_data_row_variable": "invoice_4",
            "code": "invoice_4 = Invoice(invoice_date=date(2026, 8, 5), project_id=4, invoice_amount=6200, payment_total=6200, invoice_balance=0, is_paid=True)"
        },
        {
            "test_data_row_variable": "task_1",
            "code": "task_1 = Task(project_id=1, name=\"Task 1\", description=\"Task Description 1\", total_task_hours_worked=20, total_task_amount_billed=2000, task_budget_hours=25, is_over_budget=False, invoice_id=1)"
        },
        {
            "test_data_row_variable": "task_2",
            "code": "task_2 = Task(project_id=2, name=\"Task 2\", description=\"Task Description 2\", total_task_hours_worked=15, total_task_amount_billed=1500, task_budget_hours=20, is_over_budget=False, invoice_id=2)"
        },
        {
            "test_data_row_variable": "task_3",
            "code": "task_3 = Task(project_id=3, name=\"Task 3\", description=\"Task Description 3\", total_task_hours_worked=30, total_task_amount_billed=3000, task_budget_hours=30, is_over_budget=False, invoice_id=3)"
        },
        {
            "test_data_row_variable": "task_4",
            "code": "task_4 = Task(project_id=4, name=\"Task 4\", description=\"Task Description 4\", total_task_hours_worked=10, total_task_amount_billed=1000, task_budget_hours=8, is_over_budget=True, invoice_id=4)"
        },
        {
            "test_data_row_variable": "person_1",
            "code": "person_1 = Person(client_id=1, name=\"Employee A\", email=\"empA@example.com\", phone=\"999-999-0001\", billing_rate=100, total_hours_entered=20, total_amount_billed=2000)"
        },
        {
            "test_data_row_variable": "person_2",
            "code": "person_2 = Person(client_id=2, name=\"Employee B\", email=\"empB@example.com\", phone=\"999-999-0002\", billing_rate=120, total_hours_entered=15, total_amount_billed=1800)"
        },
        {
            "test_data_row_variable": "person_3",
            "code": "person_3 = Person(client_id=3, name=\"Employee C\", email=\"empC@example.com\", phone=\"999-999-0003\", billing_rate=110, total_hours_entered=30, total_amount_billed=3300)"
        },
        {
            "test_data_row_variable": "person_4",
            "code": "person_4 = Person(client_id=4, name=\"Employee D\", email=\"empD@example.com\", phone=\"999-999-0004\", billing_rate=90, total_hours_entered=10, total_amount_billed=900)"
        },
        {
            "test_data_row_variable": "timesheet_1",
            "code": "timesheet_1 = Timesheet(task_id=1, person_id=1, date_worked=date(2026, 3, 5), hours_worked=10, month=3, year=2026, billing_rate=100, total_amount_billed=1000)"
        },
        {
            "test_data_row_variable": "timesheet_2",
            "code": "timesheet_2 = Timesheet(task_id=2, person_id=2, date_worked=date(2026, 4, 10), hours_worked=8, month=4, year=2026, billing_rate=120, total_amount_billed=960)"
        },
        {
            "test_data_row_variable": "timesheet_3",
            "code": "timesheet_3 = Timesheet(task_id=3, person_id=3, date_worked=date(2026, 5, 22), hours_worked=10, month=5, year=2026, billing_rate=110, total_amount_billed=1100)"
        },
        {
            "test_data_row_variable": "timesheet_4",
            "code": "timesheet_4 = Timesheet(task_id=4, person_id=4, date_worked=date(2026, 6, 17), hours_worked=7, month=6, year=2026, billing_rate=90, total_amount_billed=630)"
        },
        {
            "test_data_row_variable": "payment_1",
            "code": "payment_1 = Payment(invoice_id=1, payment_amount=3000, payment_date=date(2026, 5, 25), notes=\"Initial payment\")"
        },
        {
            "test_data_row_variable": "payment_2",
            "code": "payment_2 = Payment(invoice_id=2, payment_amount=7600, payment_date=date(2026, 6, 20), notes=\"Full payment\")"
        },
        {
            "test_data_row_variable": "payment_3",
            "code": "payment_3 = Payment(invoice_id=3, payment_amount=9200, payment_date=date(2026, 7, 15), notes=\"Complete payment\")"
        },
        {
            "test_data_row_variable": "payment_4",
            "code": "payment_4 = Payment(invoice_id=4, payment_amount=6200, payment_date=date(2026, 8, 10), notes=\"Paid in full\""
        }
    ],
    "test_data_sqlite": "",
    "name": "TimeTrackingBillingApplication"
}